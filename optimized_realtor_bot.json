{
  "name": "Optimized Realtor Bot Workflow",
  "nodes": [
    {
      "parameters": {
        "updates": [
          "message",
          "callback_query"
        ],
        "additionalFields": {
          "download": true
        }
      },
      "id": "telegram-trigger",
      "name": "Telegram Trigger",
      "type": "n8n-nodes-base.telegramTrigger",
      "position": [
        -1200,
        400
      ],
      "typeVersion": 1.1,
      "credentials": {
        "telegramApi": {
          "id": "YOUR_TELEGRAM_CREDENTIALS_ID",
          "name": "Telegram Bot API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\nconst body = $json;\n\n// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query –∏ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\nconst isCallback = body.callback_query ? true : false;\nconst message = body.message || body.callback_query?.message || {};\nconst callbackData = body.callback_query?.data || null;\nconst user = body.callback_query?.from || body.message?.from || {};\n\nif (!message && !isCallback) {\n  return { json: { error: 'No message or callback found' } };\n}\n\nconst chatId = message.chat?.id || body.callback_query?.message?.chat?.id;\nconst userId = user.id;\nconst username = user.username || user.first_name || 'User';\nconst firstName = user.first_name || '';\nconst lastName = user.last_name || '';\n\n// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–æ–º–∞–Ω–¥—ã\nlet messageText = '';\nlet messageType = 'text';\nlet command = null;\nlet fileId = null;\nlet fileMimeType = null;\n\nif (isCallback) {\n  messageType = 'callback';\n  command = callbackData;\n  messageText = `[Callback: ${callbackData}]`;\n} else if (message.text) {\n  messageText = message.text.trim();\n  messageType = 'text';\n  \n  // –ü—Ä–æ—Å—Ç–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã\n  if (messageText.startsWith('/')) {\n    command = messageText.split(' ')[0].toLowerCase();\n  }\n} else if (message.voice) {\n  messageType = 'voice';\n  fileId = message.voice.file_id;\n  fileMimeType = message.voice.mime_type;\n  messageText = '[–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ]';\n} else if (message.audio) {\n  messageType = 'audio';\n  fileId = message.audio.file_id;\n  fileMimeType = message.audio.mime_type;\n  messageText = '[–ê—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–µ]';\n} else if (message.document) {\n  messageType = 'document';\n  fileId = message.document.file_id;\n  fileMimeType = message.document.mime_type;\n  messageText = `[–î–æ–∫—É–º–µ–Ω—Ç: ${message.document.file_name || 'unknown'}]`;\n} else if (message.photo) {\n  messageType = 'photo';\n  const photos = message.photo;\n  fileId = photos[photos.length - 1].file_id;\n  messageText = '[–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è]';\n}\n\nreturn {\n  json: {\n    chatId,\n    userId,\n    username,\n    firstName,\n    lastName,\n    messageText,\n    messageType,\n    command,\n    fileId,\n    fileMimeType,\n    isCallback,\n    originalMessage: message,\n    callbackQueryId: body.callback_query?.id\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1000,
        400
      ],
      "id": "message-parser",
      "name": "Message Parser"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": false,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.command }}",
                    "rightValue": "/start",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "start_command"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": false,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.command }}",
                    "rightValue": "/tarif",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "subscription_info"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": false,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.command }}",
                    "rightValue": "/oplata",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "payment_info"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": false,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.command }}",
                    "rightValue": "/help",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "help_command"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": false,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.messageType }}",
                    "rightValue": "voice",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "voice_message"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": false,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.messageType }}",
                    "rightValue": "photo",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "photo_message"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": false,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.messageType }}",
                    "rightValue": "document",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "document_message"
            }
          ]
        },
        "fallbackOutput": "single",
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -800,
        400
      ],
      "id": "message-router",
      "name": "Message Router"
    },
    {
      "parameters": {
        "workflowId": "{{ $workflow.id }}",
        "waitForSubWorkflow": true
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1,
      "position": [
        -600,
        200
      ],
      "id": "check-subscription",
      "name": "Check Subscription",
      "notes": "–í—ã–∑—ã–≤–∞–µ—Ç —Å—É–±–≤–æ—Ä–∫—Ñ–ª–æ—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    },
    {
      "parameters": {
        "chatId": "={{ $json.chatId }}",
        "text": "=–ü—Ä–∏–≤–µ—Ç, {{ $json.firstName || '–¥—Ä—É–≥' }}! üëã\n\n–Ø —Ç–≤–æ–π AI-–ø–æ–º–æ—â–Ω–∏–∫ —Ä–∏–µ–ª—Ç–æ—Ä–∞.\n\nüè† **–ß—Ç–æ —è —É–º–µ—é:**\n‚Ä¢ –í–µ–¥—É CRM-—Å–∏—Å—Ç–µ–º—É –∫–ª–∏–µ–Ω—Ç–æ–≤\n‚Ä¢ –û—Ç–≤–µ—á–∞—é –Ω–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã\n‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ —Ñ–æ—Ç–æ\n‚Ä¢ –í–µ–¥—É –¥–∏–∞–ª–æ–≥ —Å –ò–ò\n\nüìã **–ö–æ–º–∞–Ω–¥—ã:**\n/tarif ‚Äî –º–æ—è –ø–æ–¥–ø–∏—Å–∫–∞\n/oplata ‚Äî –∫–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å\n/help ‚Äî –ø–æ–º–æ—â—å\n\n–ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏—Ç–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!",
        "replyMarkup": "inlineKeyboard",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "üìä –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞",
                    "additionalFields": {
                      "callback_data": "/tarif"
                    }
                  },
                  {
                    "text": "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å",
                    "additionalFields": {
                      "callback_data": "/oplata"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "‚ùì –ü–æ–º–æ—â—å",
                    "additionalFields": {
                      "callback_data": "/help"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -400,
        100
      ],
      "id": "start-response",
      "name": "Start Response",
      "credentials": {
        "telegramApi": {
          "id": "YOUR_TELEGRAM_CREDENTIALS_ID",
          "name": "Telegram Bot API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\nconst userId = $json.userId;\nconst currentDate = new Date();\n\n// TODO: –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n// –ü—Ä–∏–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏\nconst subscriptionEndDate = new Date('2025-12-31'); // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –¥–∞—Ç—É –∏–∑ –ë–î\nconst isSubscribed = currentDate <= subscriptionEndDate;\n\n// –°—á–µ—Ç—á–∏–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –Ω–µ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\nconst freeRequestsUsed = 0; // TODO: –ü–æ–ª—É—á–∏—Ç—å –∏–∑ –ë–î\nconst maxFreeRequests = 10;\nconst canUseFreeRequests = freeRequestsUsed < maxFreeRequests;\n\nreturn {\n  json: {\n    ...($json),\n    subscription: {\n      isActive: isSubscribed,\n      endDate: subscriptionEndDate.toISOString(),\n      freeRequestsUsed,\n      maxFreeRequests,\n      canUseFreeRequests: !isSubscribed && canUseFreeRequests\n    }\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -600,
        400
      ],
      "id": "subscription-checker",
      "name": "Subscription Checker"
    },
    {
      "parameters": {
        "chatId": "={{ $json.chatId }}",
        "text": "=üìä **–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏**\n\n{{ $json.subscription.isActive ? '‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞' : '‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞' }}\n\n{{ $json.subscription.isActive ? \n  'üéØ **–î–æ—Å—Ç—É–ø–Ω–æ:**\\n‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —á–∞—Ç —Å –ò–ò\\n‚Ä¢ CRM —Å–∏—Å—Ç–µ–º–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤\\n‚Ä¢ –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏\\n‚Ä¢ –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\\n\\nüìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ' + $json.subscription.endDate.split('T')[0] :\n  'üÜì **–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø:**\\n‚Ä¢ –ß–∞—Ç —Å –ò–ò: ' + ($json.subscription.maxFreeRequests - $json.subscription.freeRequestsUsed) + ' –∏–∑ ' + $json.subscription.maxFreeRequests + ' –∑–∞–ø—Ä–æ—Å–æ–≤\\n\\nüíé **–ü–æ –ø–æ–¥–ø–∏—Å–∫–µ:**\\n‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –ò–ò\\n‚Ä¢ CRM –∫–ª–∏–µ–Ω—Ç–æ–≤\\n‚Ä¢ –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å' }}",
        "replyMarkup": "inlineKeyboard",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "{{ $json.subscription.isActive ? 'üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ' : 'üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É' }}",
                    "additionalFields": {
                      "callback_data": "/oplata"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -400,
        200
      ],
      "id": "subscription-response",
      "name": "Subscription Response",
      "credentials": {
        "telegramApi": {
          "id": "YOUR_TELEGRAM_CREDENTIALS_ID",
          "name": "Telegram Bot API"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $json.chatId }}",
        "text": "=üí≥ **–ö–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É**\n\nüéØ **–¢–∞—Ä–∏—Ñ:** 990‚ÇΩ/–º–µ—Å—è—Ü\n\n‚ú® **–ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ:**\n‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —á–∞—Ç —Å –ò–ò\n‚Ä¢ CRM —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤\n‚Ä¢ –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏\n‚Ä¢ –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ —Ñ–æ—Ç–æ\n‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å –ò–ò\n\nüì± **–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:**\n‚Ä¢ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞\n‚Ä¢ –°–ë–ü (–°–∏—Å—Ç–µ–º–∞ –±—ã—Å—Ç—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π)\n‚Ä¢ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞\n\nüîó **–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã:** \n[–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É](https://your-payment-link.com)\n\n‚ùì –í–æ–ø—Ä–æ—Å—ã? –ù–∞–ø–∏—à–∏—Ç–µ /podderzhka",
        "replyMarkup": "inlineKeyboard",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —Å–µ–π—á–∞—Å",
                    "additionalFields": {
                      "url": "https://your-payment-link.com"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞",
                    "additionalFields": {
                      "callback_data": "/podderzhka"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -400,
        300
      ],
      "id": "payment-response",
      "name": "Payment Response",
      "credentials": {
        "telegramApi": {
          "id": "YOUR_TELEGRAM_CREDENTIALS_ID",
          "name": "Telegram Bot API"
        }
      }
    },
    {
      "parameters": {
        "resource": "file",
        "fileId": "={{ $json.fileId }}"
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -400,
        500
      ],
      "id": "download-voice-file",
      "name": "Download Voice File",
      "credentials": {
        "telegramApi": {
          "id": "YOUR_TELEGRAM_CREDENTIALS_ID",
          "name": "Telegram Bot API"
        }
      }
    },
    {
      "parameters": {
        "resource": "audio",
        "operation": "transcribe",
        "options": {
          "language": "ru",
          "prompt": "–≠—Ç–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ä–∏–µ–ª—Ç–æ—Ä–∞ –∏–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞. –ú–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏, —Å–¥–µ–ª–∫–∞—Ö, —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -200,
        500
      ],
      "id": "transcribe-voice",
      "name": "Transcribe Voice",
      "credentials": {
        "openAiApi": {
          "id": "YOUR_OPENAI_CREDENTIALS_ID",
          "name": "OpenAI API"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "transcribed-text",
              "name": "messageText",
              "value": "={{ $json.text }}",
              "type": "string"
            },
            {
              "id": "update-type",
              "name": "messageType",
              "value": "text",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        0,
        500
      ],
      "id": "update-transcribed-message",
      "name": "Update Transcribed Message"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": false,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "leftValue": "={{ $json.subscription.isActive }}",
              "rightValue": "true",
              "operator": {
                "type": "boolean",
                "operation": "true"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        200,
        400
      ],
      "id": "subscription-gate",
      "name": "Subscription Gate"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": false,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "leftValue": "={{ $json.subscription.canUseFreeRequests }}",
              "rightValue": "true",
              "operator": {
                "type": "boolean",
                "operation": "true"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        200,
        600
      ],
      "id": "free-request-gate",
      "name": "Free Request Gate"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.messageText }}",
        "hasOutputParser": false,
        "options": {
          "systemMessage": "=–¢—ã ‚Äî AI-–ø–æ–º–æ—â–Ω–∏–∫ —Ä–∏–µ–ª—Ç–æ—Ä–∞ –≤ Telegram-–±–æ—Ç–µ.\n\n**–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:**\n- –ò–º—è: {{ $json.firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' }}\n- Username: @{{ $json.username }}\n- ID: {{ $json.userId }}\n- –ü–æ–¥–ø–∏—Å–∫–∞: {{ $json.subscription.isActive ? '–ê–∫—Ç–∏–≤–Ω–∞ –¥–æ ' + $json.subscription.endDate.split('T')[0] : '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞ (' + ($json.subscription.maxFreeRequests - $json.subscription.freeRequestsUsed) + ' –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤)' }}\n\n**–¢–≤–æ—è —Ä–æ–ª—å:**\n1. –ü–æ–º–æ–≥–∞–µ—à—å —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏\n2. –ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–µ—à—å –ø–æ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º –∞—Å–ø–µ–∫—Ç–∞–º —Å–¥–µ–ª–æ–∫\n3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ —Å–∏—Ç—É–∞—Ü–∏–∏\n4. –î–∞–µ—à—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã —Ä–∏–µ–ª—Ç–æ—Ä–∞–º\n\n**–°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:**\n- –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, –Ω–æ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π\n- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏ –ø–æ–ª–µ–∑–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã\n- –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–¥–∞–≤–∞–π —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã\n- –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –º—è–≥–∫–æ —É–ø–æ–º—è–Ω–∏ —ç—Ç–æ\n\n**–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**\n- –ù–µ –¥–∞–µ—à—å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–∫–ª—é—á–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –æ–±—â–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏)\n- –†–µ–∫–æ–º–µ–Ω–¥—É–µ—à—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º –≤ —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö\n- –ü–æ–º–Ω–∏ –æ –ª–∏–º–∏—Ç–∞—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        400,
        400
      ],
      "id": "ai-realtor-agent",
      "name": "AI Realtor Agent"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list"
        },
        "options": {
          "maxTokens": 1000,
          "temperature": 0.7,
          "responseFormat": "text"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        400,
        600
      ],
      "id": "openai-chat-model",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "YOUR_OPENAI_CREDENTIALS_ID",
          "name": "OpenAI API"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ 'user_' + $json.userId }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        400,
        750
      ],
      "id": "postgres-memory",
      "name": "Postgres Chat Memory",
      "credentials": {
        "postgres": {
          "id": "YOUR_POSTGRES_CREDENTIALS_ID",
          "name": "Postgres Database"
        }
      }
    },
    {
      "parameters": {
        "mode": "retrieve",
        "tableName": {
          "__rl": true,
          "value": "realtor_knowledge",
          "mode": "list"
        },
        "topK": 5,
        "options": {
          "metadata": {
            "metadataValues": [
              {
                "name": "user_id",
                "value": "={{ $json.userId }}"
              }
            ]
          }
        }
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1.3,
      "position": [
        400,
        850
      ],
      "id": "knowledge-vector-store",
      "name": "Knowledge Vector Store",
      "credentials": {
        "supabaseApi": {
          "id": "YOUR_SUPABASE_CREDENTIALS_ID",
          "name": "Supabase API"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $json.chatId }}",
        "text": "={{ $json.output }}",
        "additionalFields": {
          "appendAttribution": false,
          "replyToMessageId": "={{ $('message-parser').item.json.originalMessage.message_id }}"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        600,
        400
      ],
      "id": "ai-response",
      "name": "AI Response",
      "credentials": {
        "telegramApi": {
          "id": "YOUR_TELEGRAM_CREDENTIALS_ID",
          "name": "Telegram Bot API"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $json.chatId }}",
        "text": "=üö´ **–õ–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω**\n\n–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤—Å–µ {{ $json.subscription.maxFreeRequests }} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ò–ò.\n\nüíé **–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è:**\n‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è —Å –ò–ò\n‚Ä¢ –î–æ—Å—Ç—É–ø–∞ –∫ CRM —Å–∏—Å—Ç–µ–º–µ\n‚Ä¢ –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π\n‚Ä¢ –ê–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n\nüí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å: 990‚ÇΩ/–º–µ—Å—è—Ü",
        "replyMarkup": "inlineKeyboard",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                    "additionalFields": {
                      "callback_data": "/oplata"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        600,
        600
      ],
      "id": "limit-exceeded-response",
      "name": "Limit Exceeded Response",
      "credentials": {
        "telegramApi": {
          "id": "YOUR_TELEGRAM_CREDENTIALS_ID",
          "name": "Telegram Bot API"
        }
      }
    },
    {
      "parameters": {
        "tableId": "user_messages",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "user_id",
              "fieldValue": "={{ $json.userId }}"
            },
            {
              "fieldId": "chat_id",
              "fieldValue": "={{ $json.chatId }}"
            },
            {
              "fieldId": "username",
              "fieldValue": "={{ $json.username }}"
            },
            {
              "fieldId": "first_name",
              "fieldValue": "={{ $json.firstName }}"
            },
            {
              "fieldId": "message_text",
              "fieldValue": "={{ $json.messageText }}"
            },
            {
              "fieldId": "message_type",
              "fieldValue": "={{ $json.messageType }}"
            },
            {
              "fieldId": "command",
              "fieldValue": "={{ $json.command }}"
            },
            {
              "fieldId": "is_subscribed",
              "fieldValue": "={{ $json.subscription.isActive }}"
            },
            {
              "fieldId": "ai_response",
              "fieldValue": "={{ $('ai-realtor-agent').item.json.output }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        800,
        400
      ],
      "id": "log-conversation",
      "name": "Log Conversation",
      "credentials": {
        "supabaseApi": {
          "id": "YOUR_SUPABASE_CREDENTIALS_ID",
          "name": "Supabase API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤\nconst userId = $json.userId;\nconst isSubscribed = $json.subscription.isActive;\n\nif (!isSubscribed) {\n  // TODO: –û–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n  // UPDATE users SET free_requests_used = free_requests_used + 1 WHERE user_id = userId\n  console.log(`Incrementing free request counter for user ${userId}`);\n}\n\nreturn { json: $json };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        800,
        500
      ],
      "id": "update-request-counter",
      "name": "Update Request Counter"
    },
    {
      "parameters": {
        "chatId": "={{ $json.chatId }}",
        "text": "=‚ùì **–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É**\n\nü§ñ **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n/start ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n/tarif ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n/oplata ‚Äî –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n/help ‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\nüí¨ **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**\n‚Ä¢ –ü–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n‚Ä¢ –ó–∞–≥—Ä—É–∂–∞–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ —Ñ–æ—Ç–æ\n‚Ä¢ –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏\n\nüè† **–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:**\n‚Ä¢ –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏\n‚Ä¢ –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n‚Ä¢ –°–æ–≤–µ—Ç—ã –ø–æ —Å–¥–µ–ª–∫–∞–º\n‚Ä¢ CRM —Å–∏—Å—Ç–µ–º–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ (–ø–æ –ø–æ–¥–ø–∏—Å–∫–µ)\n\nüÜò **–ü–æ–¥–¥–µ—Ä–∂–∫–∞:** @your_support_username",
        "replyMarkup": "inlineKeyboard",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "üè† –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É",
                    "additionalFields": {
                      "callback_data": "/start"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -400,
        400
      ],
      "id": "help-response",
      "name": "Help Response",
      "credentials": {
        "telegramApi": {
          "id": "YOUR_TELEGRAM_CREDENTIALS_ID",
          "name": "Telegram Bot API"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $json.chatId }}",
        "text": "=ü§î **–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞**\n\n–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.\n\nüìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n/start ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n/tarif ‚Äî –º–æ—è –ø–æ–¥–ø–∏—Å–∫–∞\n/oplata ‚Äî –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n/help ‚Äî –ø–æ–º–æ—â—å\n\nüí° **–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å** ‚Äî —è –æ—Ç–≤–µ—á—É –∫–∞–∫ AI-–ø–æ–º–æ—â–Ω–∏–∫!",
        "replyMarkup": "inlineKeyboard",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "‚ùì –ü–æ–º–æ—â—å",
                    "additionalFields": {
                      "callback_data": "/help"
                    }
                  },
                  {
                    "text": "üè† –ì–ª–∞–≤–Ω–∞—è",
                    "additionalFields": {
                      "callback_data": "/start"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -400,
        800
      ],
      "id": "fallback-response",
      "name": "Fallback Response",
      "credentials": {
        "telegramApi": {
          "id": "YOUR_TELEGRAM_CREDENTIALS_ID",
          "name": "Telegram Bot API"
        }
      }
    }
  ],
  "connections": {
    "telegram-trigger": {
      "main": [
        [
          {
            "node": "message-parser",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "message-parser": {
      "main": [
        [
          {
            "node": "message-router",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "message-router": {
      "main": [
        [
          {
            "node": "subscription-checker",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "subscription-checker",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "subscription-checker",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "subscription-checker",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "download-voice-file",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "subscription-checker",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "subscription-checker",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "subscription-checker",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "subscription-checker": {
      "main": [
        [
          {
            "node": "start-response",
            "type": "main",
            "index": 0
          },
          {
            "node": "subscription-response",
            "type": "main",
            "index": 0
          },
          {
            "node": "payment-response",
            "type": "main",
            "index": 0
          },
          {
            "node": "help-response",
            "type": "main",
            "index": 0
          },
          {
            "node": "subscription-gate",
            "type": "main",
            "index": 0
          },
          {
            "node": "fallback-response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "download-voice-file": {
      "main": [
        [
          {
            "node": "transcribe-voice",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "transcribe-voice": {
      "main": [
        [
          {
            "node": "update-transcribed-message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "update-transcribed-message": {
      "main": [
        [
          {
            "node": "subscription-gate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "subscription-gate": {
      "main": [
        [
          {
            "node": "ai-realtor-agent",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "free-request-gate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "free-request-gate": {
      "main": [
        [
          {
            "node": "ai-realtor-agent",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "limit-exceeded-response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ai-realtor-agent": {
      "main": [
        [
          {
            "node": "ai-response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "openai-chat-model": {
      "ai_languageModel": [
        [
          {
            "node": "ai-realtor-agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "postgres-memory": {
      "ai_memory": [
        [
          {
            "node": "ai-realtor-agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "knowledge-vector-store": {
      "ai_tool": [
        [
          {
            "node": "ai-realtor-agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "ai-response": {
      "main": [
        [
          {
            "node": "log-conversation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "log-conversation": {
      "main": [
        [
          {
            "node": "update-request-counter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": {
      "id": "ERROR_WORKFLOW_ID"
    }
  },
  "meta": {
    "templateCredsSetupCompleted": false
  },
  "id": "optimized-realtor-bot",
  "tags": [
    "telegram",
    "ai",
    "realtor",
    "bot",
    "optimized"
  ]
}