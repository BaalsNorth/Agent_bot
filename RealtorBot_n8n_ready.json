{
  "name": "RealtorBot_n8n_ready",
  "nodes": [
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "id": "tg_trigger",
      "name": "Telegram Trigger",
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1,
      "position": [
        80,
        120
      ]
    },
    {
      "parameters": {
        "functionCode": "// Normalize Telegram message into a stable shape\nconst m = $json.message || $json;\nconst from = m.from || {};\nconst chat = m.chat || {};\n\nconst isVoice = !!(m.voice && m.voice.file_id);\nconst isText = !!m.text;\n\nconst messageText = isText ? m.text : '';\n\nreturn [{\n  json: {\n    raw: m,\n    messageType: isVoice ? 'voice' : 'text',\n    messageText,\n    fileId: isVoice ? m.voice.file_id : null,\n    mimeType: isVoice ? (m.voice.mime_type || 'audio/ogg') : null,\n    user: {\n      id: from.id,\n      username: from.username || null,\n      first_name: from.first_name || null,\n      last_name: from.last_name || null\n    },\n    chatId: chat.id\n  }\n}];\n"
      },
      "id": "normalize",
      "name": "Normalize",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [
        320,
        120
      ]
    },
    {
      "parameters": {
        "url": "={{$env.SUPABASE_URL}}/rest/v1/users?telegram_id=eq.{{$json.user.id}}",
        "options": {},
        "allowUnauthorizedCerts": true,
        "sendBinaryData": false,
        "headerParametersUi": {
          "parameter": [
            { "name": "apikey", "value": "={{$env.SUPABASE_KEY}}" },
            { "name": "Authorization", "value": "Bearer {{$env.SUPABASE_KEY}}" },
            { "name": "Accept", "value": "application/json" }
          ]
        }
      },
      "id": "sb_get_user",
      "name": "Supabase GetUser",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        560,
        20
      ]
    },
    {
      "parameters": {
        "functionCode": "// If user exists, pass through; else mark for creation\nconst res = items[0].json;\nconst list = Array.isArray(res) ? res : (res.data || []);\nif (list.length > 0) {\n  return items.map(i => ({ json: { userRow: list[0] } }));\n} else {\n  return [{ json: { userRow: null, create: true } }];\n}\n"
      },
      "id": "ensure_user",
      "name": "EnsureUser (branch)",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [
        760,
        20
      ]
    },
    {
      "parameters": {
        "url": "={{$env.SUPABASE_URL}}/rest/v1/users",
        "options": {},
        "allowUnauthorizedCerts": true,
        "sendBinaryData": false,
        "headerParametersUi": {
          "parameter": [
            { "name": "apikey", "value": "={{$env.SUPABASE_KEY}}" },
            { "name": "Authorization", "value": "Bearer {{$env.SUPABASE_KEY}}" },
            { "name": "Content-Type", "value": "application/json" },
            { "name": "Prefer", "value": "return=representation" }
          ]
        },
        "jsonParameters": true,
        "payloadJson": "{\n  \"telegram_id\": {{$('Normalize').item.json.user.id}},\n  \"username\": \"={{$('Normalize').item.json.user.username}}\",\n  \"first_name\": \"={{$('Normalize').item.json.user.first_name}}\",\n  \"last_name\": \"={{$('Normalize').item.json.user.last_name}}\",\n  \"trial_started_at\": \"={{$now}}\",\n  \"subscription_status\": \"inactive\"\n}\n"
      },
      "id": "sb_create_user",
      "name": "Supabase CreateUser",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        980,
        -80
      ]
    },
    {
      "parameters": {
        "mode": "passThrough",
        "join": "combine"
      },
      "id": "user_row_merge",
      "name": "UserRow",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [
        1180,
        20
      ]
    },
    {
      "parameters": {
        "functionCode": "// Compute trialActive and gate\nconst u = $json.userRow || {};\nconst sub = (u.subscription_status || 'inactive').toLowerCase();\nlet trialActive = false;\nif (u.trial_started_at) {\n  const start = new Date(u.trial_started_at);\n  const now = new Date();\n  const diffDays = Math.floor((now - start) / (1000*60*60*24));\n  trialActive = diffDays <= 3;\n} else {\n  trialActive = true;\n}\nconst gate = trialActive || sub === 'active';\nreturn [{ json: { gate, trialActive, subscription_status: sub, userRow: u } }];\n"
      },
      "id": "trial_gate",
      "name": "TrialGate",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [
        1380,
        20
      ]
    },
    {
      "parameters": {
        "model": "gpt-4o-mini",
        "systemMessage": "Ты — классификатор сообщений для телеграм-бота риелторов. Верни JSON с полями: { \"type\": \"command|general\", \"command\": \"/start|/help|/tarif|/privacy|null\" }.",
        "prompt": "={{$json.messageText || ''}}",
        "responseFormat": "json"
      },
      "id": "classifier",
      "name": "Classifier",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 4,
      "position": [
        560,
        240
      ]
    },
    {
      "parameters": {
        "value1": "={{$json.type}}",
        "rules": [
          { "operation": "equal", "value": "command" },
          { "operation": "equal", "value": "general" }
        ]
      },
      "id": "route_type",
      "name": "Route: command or general",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 2,
      "position": [
        760,
        240
      ]
    },
    {
      "parameters": {
        "value1": "={{$json.command}}",
        "rules": [
          { "operation": "equal", "value": "/start" },
          { "operation": "equal", "value": "/help" },
          { "operation": "equal", "value": "/tarif" },
          { "operation": "equal", "value": "/privacy" }
        ]
      },
      "id": "which_command",
      "name": "Which command?",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 2,
      "position": [
        980,
        180
      ]
    },
    {
      "parameters": {
        "chatId": "={{$json.chatId}}",
        "text": "👋 Привет! Активирован бесплатный триал на 3 дня. Команды: /help /tarif /privacy",
        "additionalFields": {}
      },
      "id": "send_start",
      "name": "Send /start",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [
        1200,
        80
      ]
    },
    {
      "parameters": {
        "chatId": "={{$json.chatId}}",
        "text": "Команды: /start /help /tarif /privacy. Пиши вопрос текстом — я помогу с юридическими и рыночными вопросами по СПб.",
        "additionalFields": {}
      },
      "id": "send_help",
      "name": "Send /help",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [
        1200,
        140
      ]
    },
    {
      "parameters": {
        "chatId": "={{$json.chatId}}",
        "text": "Тарифы: триал 3 дня бесплатно. Подписка — 2900 руб/мес. Команда /oplata — получишь ссылку на оплату.",
        "additionalFields": {}
      },
      "id": "send_tarif",
      "name": "Send /tarif",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [
        1200,
        200
      ]
    },
    {
      "parameters": {
        "chatId": "={{$json.chatId}}",
        "text": "Политика конфиденциальности: ссылка на документ. Нажимая /start, даёшь согласие на обработку ПДн. Для удаления данных — напиши: Удалить мои данные.",
        "additionalFields": {}
      },
      "id": "send_privacy",
      "name": "Send /privacy",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [
        1200,
        260
      ]
    },
    {
      "parameters": {
        "model": "gpt-4o-mini",
        "systemMessage": "Ты — ИИ‑ассистент по недвижимости Санкт‑Петербурга. Отвечай конкретно и по делу. Если запрос содержит персональные данные, напомни про /privacy.",
        "prompt": "={{$json.messageText || ''}}"
      },
      "id": "agent",
      "name": "RealtorAgent",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 4,
      "position": [
        980,
        300
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            { "id": "reply", "name": "bot_reply", "value": "={{$json.data || $json.answer || $json}}", "type": "string" }
          ]
        },
        "options": {}
      },
      "id": "prepare_reply",
      "name": "Prepare Reply",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1180,
        300
      ]
    },
    {
      "parameters": {
        "mode": "combine"
      },
      "id": "merge_agent_gate",
      "name": "Join: agent + gate",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [
        1380,
        160
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            { "value1": "={{$json.gate}}", "operation": "isTrue" }
          ]
        }
      },
      "id": "gate_allowed",
      "name": "Gate allowed?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1580,
        160
      ]
    },
    {
      "parameters": {
        "chatId": "={{$json.chatId}}",
        "text": "={{$json.bot_reply}}"
      },
      "id": "send_ai_reply",
      "name": "Send AI reply",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [
        1780,
        120
      ]
    },
    {
      "parameters": {
        "chatId": "={{$json.chatId}}",
        "text": "Триал завершён. Чтобы продолжить пользоваться ботом (юридические разборы, CRM, документы), оформи подписку. Команда: /tarif"
      },
      "id": "send_paywall",
      "name": "Send Paywall",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [
        1780,
        220
      ]
    },
    {
      "parameters": {
        "url": "={{$env.SUPABASE_URL}}/rest/v1/messages",
        "options": {},
        "allowUnauthorizedCerts": true,
        "sendBinaryData": false,
        "headerParametersUi": {
          "parameter": [
            { "name": "apikey", "value": "={{$env.SUPABASE_KEY}}" },
            { "name": "Authorization", "value": "Bearer {{$env.SUPABASE_KEY}}" },
            { "name": "Content-Type", "value": "application/json" },
            { "name": "Prefer", "value": "return=representation" }
          ]
        },
        "jsonParameters": true,
        "payloadJson": "{\n  \"user_id\": {{$('Normalize').item.json.user.id}},\n  \"chat_id\": {{$('Normalize').item.json.chatId}},\n  \"message_type\": \"={{$('Normalize').item.json.messageType}}\",\n  \"message_text\": \"={{$('Normalize').item.json.messageText}}\",\n  \"bot_reply\": \"={{$json.bot_reply || ''}}\"\n}\n"
      },
      "id": "sb_log_message",
      "name": "Supabase LogMessage",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        1980,
        160
      ]
    },
    {
      "parameters": {
        "mode": "combine"
      },
      "id": "merge_cn",
      "name": "Merge: Normalize + Classifier",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [
        660,
        240
      ]
    }
  ],
  "connections": {
    "Telegram Trigger": {
      "main": [
        [ { "node": "Normalize", "type": "main", "index": 0 } ]
      ]
    },
    "Normalize": {
      "main": [
        [
          { "node": "Supabase GetUser", "type": "main", "index": 0 },
          { "node": "Classifier", "type": "main", "index": 0 }
        ]
      ]
    },
    "Supabase GetUser": {
      "main": [
        [ { "node": "EnsureUser (branch)", "type": "main", "index": 0 } ]
      ]
    },
    "EnsureUser (branch)": {
      "main": [
        [
          { "node": "Supabase CreateUser", "type": "main", "index": 0 },
          { "node": "UserRow", "type": "main", "index": 0 }
        ]
      ]
    },
    "Supabase CreateUser": {
      "main": [
        [ { "node": "UserRow", "type": "main", "index": 0 } ]
      ]
    },
    "UserRow": {
      "main": [
        [ { "node": "TrialGate", "type": "main", "index": 0 } ]
      ]
    },
    "Classifier": {
      "main": [
        [ { "node": "Route: command or general", "type": "main", "index": 0 } ]
      ]
    },
    "Route: command or general": {
      "main": [
        [ { "node": "Which command?", "type": "main", "index": 0 } ],
        [ { "node": "RealtorAgent", "type": "main", "index": 0 } ]
      ]
    },
    "Which command?": {
      "main": [
        [ { "node": "Send /start", "type": "main", "index": 0 } ],
        [ { "node": "Send /help", "type": "main", "index": 0 } ],
        [ { "node": "Send /tarif", "type": "main", "index": 0 } ],
        [ { "node": "Send /privacy", "type": "main", "index": 0 } ]
      ]
    },
    "RealtorAgent": {
      "main": [
        [ { "node": "Prepare Reply", "type": "main", "index": 0 } ]
      ]
    },
    "Prepare Reply": {
      "main": [
        [ { "node": "Join: agent + gate", "type": "main", "index": 0 } ]
      ]
    },
    "TrialGate": {
      "main": [
        [ { "node": "Join: agent + gate", "type": "main", "index": 1 } ]
      ]
    },
    "Join: agent + gate": {
      "main": [
        [ { "node": "Gate allowed?", "type": "main", "index": 0 } ]
      ]
    },
    "Gate allowed?": {
      "main": [
        [ { "node": "Send AI reply", "type": "main", "index": 0 } ],
        [ { "node": "Send Paywall", "type": "main", "index": 0 } ]
      ]
    },
    "Send AI reply": {
      "main": [
        [ { "node": "Supabase LogMessage", "type": "main", "index": 0 } ]
      ]
    },
    "Send Paywall": {
      "main": [
        [ { "node": "Supabase LogMessage", "type": "main", "index": 0 } ]
      ]
    },
    "Merge: Normalize + Classifier": {
      "main": [
        [ { "node": "Normalize", "type": "main", "index": 0 }, { "node": "Classifier", "type": "main", "index": 0 } ]
      ]
    }
  },
  "active": false,
  "settings": {},
  "staticData": null,
  "pinData": {}
}